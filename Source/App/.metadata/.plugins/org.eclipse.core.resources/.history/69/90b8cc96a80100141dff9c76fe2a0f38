package com.ssm.cyclists.view.layout;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.ssm.cyclists.R;
import com.ssm.cyclists.controller.HomeFragment;
import com.ssm.cyclists.model.ResourceManager;
import com.ssm.cyclists.view.ImageViewRounded;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.RectF;
import android.os.AsyncTask;
import android.os.NetworkOnMainThreadException;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;



public class HomeLayout extends BaseFragmentLayout {
	
	static String TAG = HomeLayout.class.getSimpleName();
	
	Button menubutton;
	
	TextView tvUserID;
	TextView tvLocation;
	TextView tvWeekDay;
	TextView tvTemperature;
	TextView tvRainPercent;
	ImageViewRounded ivProfileImage;
	public HomeLayout(HomeFragment instance) {
		super(instance);
	}
	
	public void init(){
		

		
		tvUserID = (TextView)getView().findViewById(R.id.user_id_home);
		tvLocation = (TextView)getView().findViewById(R.id.location_home);
		tvWeekDay = (TextView)getView().findViewById(R.id.weekday_home);
		tvTemperature = (TextView)getView().findViewById(R.id.temperature_home);
		tvRainPercent = (TextView)getView().findViewById(R.id.rainpercent_home);
		ivProfileImage = (ImageViewRounded)getView().findViewById(R.id.profile_image);
		
		ivProfileImage.setImageResource(R.drawable.profile_sample);
		
		
		tvUserID.setTypeface(ResourceManager.getInstance().getFont("helvetica"));
		tvLocation.setTypeface(ResourceManager.getInstance().getFont("helvetica"));
		tvWeekDay.setTypeface(ResourceManager.getInstance().getFont("helvetica"));
		
		tvTemperature.setTypeface(ResourceManager.getInstance().getFont("helvetica"));
		tvRainPercent.setTypeface(ResourceManager.getInstance().getFont("nanum_gothic"));
		
		new Thread(new Runnable() {
			
			@Override
			public void run() {
			 	   getWeatherStatus(37.559904, 127.037562);
			}
		}).start();
		
	}
	@Override
	public void createView(LayoutInflater inflater, ViewGroup container){
		view = inflater.inflate(R.layout.fragment_home, container, false);
	}
	
	public void getWeatherStatus(double latitude, double longitude){
		String strURL = String.format("http://api.openweathermap.org/data/2.5/weather?lat=%f&lon=%f",latitude,longitude); 
		String jsonString = DownloadHtml(strURL);
		try {
			Log.d(TAG,"ok");
			JSONObject jsonObj = new JSONObject(jsonString);
			JSONObject weather = jsonObj.getJSONArray("weather").getJSONObject(1);
			Toast.makeText(getView().getContext(), "weather : " + weather.getString("main"), Toast.LENGTH_SHORT).show();

			JSONObject main = jsonObj.getJSONObject("main");
			Toast.makeText(getView().getContext(),"temp : " + main.getString("temp"), Toast.LENGTH_SHORT).show();
			Toast.makeText(getView().getContext(), "pressure : " + main.getString("pressure"), Toast.LENGTH_SHORT).show();
			Toast.makeText(getView().getContext(), "humidity" + main.getString("humidity"), Toast.LENGTH_SHORT).show();

		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private String DownloadHtml(String addr){
		StringBuilder html = new StringBuilder();
		try{
			URL url = new URL(addr);
			HttpURLConnection conn = (HttpURLConnection)url.openConnection();
			if(conn != null){
				conn.setConnectTimeout(10000);
				conn.setUseCaches(false);
				if(conn.getResponseCode() == HttpURLConnection.HTTP_OK){
					BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
					for(;;){
						String line = br.readLine();
						if(line == null)break;
						html.append(line + '\n');
					}
					br.close();
				}
				conn.disconnect();
			}
		
		}catch(Exception e){
			Log.e(TAG,e.getMessage());
		}
		return html.toString();
	}
	
	/*
	  * Making image in circular shape
	  */
	 public Bitmap getRoundedShape(Bitmap scaleBitmapImage) {

	  int targetWidth = 50;
	  int targetHeight = 50;

	
	  Bitmap targetBitmap = Bitmap.createBitmap(targetWidth, targetHeight,Bitmap.Config.ARGB_8888);
	  Canvas canvas = new Canvas(targetBitmap);
	  Path path = new Path();
	  path.addCircle(((float) targetWidth) / 2,((float) targetHeight) / 2,(Math.min(((float) targetWidth),
			  ((float) targetHeight)) / 2),Path.Direction.CW);
	  Paint paint = new Paint(); 
	  paint.setColor(Color.GRAY); 

	  paint.setStyle(Paint.Style.FILL);
	  paint.setAntiAlias(true);
	  paint.setDither(true);
	  paint.setFilterBitmap(true);
	  canvas.drawOval(new RectF(0, 0, targetWidth, targetHeight), paint) ;
 
	  canvas.clipPath(path);
	  Bitmap sourceBitmap = scaleBitmapImage;
	  canvas.drawBitmap(sourceBitmap, new Rect(0, 0, sourceBitmap.getWidth(),
			  sourceBitmap.getHeight()), new RectF(0, 0, targetWidth,
			  targetHeight), paint);
	  
	  
	  canvas.drawBitmap(sourceBitmap,new Rect(0, 0, sourceBitmap.getWidth(),
	    sourceBitmap.getHeight()),new Rect(0, 0, targetWidth,
	    targetHeight), null);
	  
	  return targetBitmap;
	 }

}
