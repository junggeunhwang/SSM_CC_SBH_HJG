package com.ssm.cyclists.controller;

import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;

import com.facebook.HttpMethod;
import com.facebook.LoggingBehavior;
import com.facebook.Request;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.SessionState;
import com.facebook.Settings;
import com.facebook.model.GraphUser;
import com.google.android.gms.internal.fr;
import com.ssm.cyclists.controller.activity.MainActivity;
import com.ssm.cyclists.model.CruiseDataManager;
import com.ssm.cyclists.model.SettingsData;
import com.ssm.cyclists.model.UserData;
import com.ssm.cyclists.controller.asynctask.AsyncGetBitmapTask;

import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.widget.Toast;



public class FacebookManager {

	static String TAG = FacebookManager.class.getSimpleName();
	
	private static final String DEST_DIR  = "/storage/emulated/legacy/Cyclists";
	private static final String DEST_DIR_PROFILE  = DEST_DIR+ "/Profile" ;
	
	private static FacebookManager instance;
	private Session.StatusCallback statusCallback = new SessionStatusCallback();
	private static final String URL_PREFIX_FRIENDS = "https://graph.facebook.com/me/friends?access_token=";
	
	private FacebookManager() {

	}
	
	public void init(Bundle savedInstanceState){
		getHashKey();
		Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
		Session session = Session.getActiveSession();
	        if (session == null) {
	            if (savedInstanceState != null) {
	                session = Session.restoreSession(MainActivity.getInstasnce(), null, statusCallback, savedInstanceState);
	            }
	            if (session == null) {
	                session = new Session(MainActivity.getInstasnce().getApplicationContext());
	            }
	            Session.setActiveSession(session);
	            if (session.getState().equals(SessionState.CREATED_TOKEN_LOADED)) {
	                session.openForRead(new Session.OpenRequest(MainActivity.getInstasnce()).setCallback(statusCallback));
	            }
	        }
	}
	
    
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        
        Session.getActiveSession().onActivityResult(MainActivity.getInstasnce(), requestCode, resultCode, data);
    }
    
    
    public void onSaveInstanceState(Bundle outState) {
        Session session = Session.getActiveSession();
        Session.saveSession(session, outState);
    }
	
	public static FacebookManager getInstance(){
		if(instance == null) instance = new FacebookManager();
		return instance;		
	}
	
	public void start(){
		Session.getActiveSession().addCallback(statusCallback);
	}
	
	public void stop(){
		Session.getActiveSession().addCallback(statusCallback);
	}
	
    public void onClickFacebook() {
        Session session = Session.getActiveSession();
        if (session.isOpened()) {
        	logout();
        	Toast.makeText(MainActivity.getInstasnce().getApplicationContext(),"facebook logout",Toast.LENGTH_SHORT).show();
        } else {
        	login();
        	getMyFacebookInfo(session);
        	Toast.makeText(MainActivity.getInstasnce().getApplicationContext(),"facebook login",Toast.LENGTH_SHORT).show();
        }
    }
	
    
	private void login(){
		 Session session = Session.getActiveSession();
	        if (!session.isOpened() && !session.isClosed()) {
	            session.openForRead(new Session.OpenRequest(MainActivity.getInstasnce()).setCallback(statusCallback));
	        } else {
	            Session.openActiveSession(MainActivity.getInstasnce(), true, statusCallback);
	        }
	}
	
	private void logout(){
		 Session session = Session.getActiveSession();
	        if (!session.isClosed()) {
	            session.closeAndClearTokenInformation();
	            SettingsData.getInstance().getMe().setProfileImg(null);
	            SettingsData.getInstance().getMe().setUserName(null);
	        }
	}
	
	private class SessionStatusCallback implements Session.StatusCallback {
	        @Override
	        public void call(Session session, SessionState state, Exception exception) {
	            
	        }
	    }
	   
    private void getMyFacebookInfo(Session session){
    	if(session.isOpened()){
    		Request.newMeRequest(session, new Request.GraphUserCallback() {
    			 
                @Override
                public void onCompleted(GraphUser user, Response response) {
                	                	
                    System.err.println(" getId  :  " + user.getId());
                    System.err.println(" getFirstName  :  " + user.getFirstName());
                    System.err.println(" getLastName  :  " + user.getLastName());
                    System.err.println(" getMiddleName  :  " + user.getMiddleName());
                    System.err.println(" getBirthday  :  " + user.getBirthday());
                    System.err.println(" getLink  :  " + user.getLink());
                    System.err.println(" getName  :  " + user.getName());
                    System.err.println(" getUsername :  " + user.getUsername());
                    System.err.println(" getLocation :  " + user.getLocation());
                    System.err.println("getRawResponse  :  " + response.getRawResponse());
                   
                   
                    UserData me = SettingsData.getInstance().getMe();
                    me.setUserName(user.getUsername());
                    me.setFacebook_id(user.getId());
                    SettingsData.getInstance().setMe(me);
                    AsyncGetBitmapTask task = new AsyncGetBitmapTask();
                    task.execute();
                }
            }).executeAsync();

    	}
    }
	
//    public void getUserPic(final String userID) {
//    	
//    	AsyncTask<String,Long,Long> task =new AsyncTask<String,Long,Long>() {
//
//    		Bitmap resultBitmap = null;
//    		
//			@Override
//			protected Long doInBackground(String... id) {
//				 String imageURL;
//			        
//			        Log.d(TAG, "Loading Picture");
//			        imageURL = "http://graph.facebook.com/"+id[0]+"/picture?type=small";
//			        Log.d(TAG,id + " Profile URL : " + imageURL);
//			        try {
//			        	resultBitmap = BitmapFactory.decodeStream((InputStream)new URL(imageURL).getContent());
//			        } catch (Exception e) {
//			            Log.d("TAG", "Loading Picture FAILED");
//			            e.printStackTrace();
//			            return 1L;
//			        }
//			        
//			        if(userID.equals(SettingsData.getInstance().getMe().getFacebook_id())){
//			        	SettingsData.getInstance().getMe().setProfileImg(resultBitmap);
//							
//						File ReceiveDir = new File(DEST_DIR_PROFILE);
//		                if(!ReceiveDir.exists()){
//		                	ReceiveDir.mkdir();
//		                }
//		                	
//						String fileName = "me.png";
//						File myProfile = new File(DEST_DIR_PROFILE + "/",fileName);
//							
//		                try {
//		                	myProfile.createNewFile();
//		                	FileOutputStream fo = new FileOutputStream(myProfile);
//		                	
//		                	boolean ret = resultBitmap.compress(Bitmap.CompressFormat.PNG, 85, fo);
//								
//		                	fo.flush();
//		                	fo.close();
//		                } catch (FileNotFoundException e) {
//		                	Log.e(TAG,e.getLocalizedMessage());
//		                	e.printStackTrace();
//		                } catch (IOException e) {
//		                	Log.e(TAG,e.getLocalizedMessage());
//		                	e.printStackTrace();
//		                }
//		                	
//			        }else{
//			        	ArrayList<UserData> friend_list = SettingsData.getInstance().getFriendList();
//							
//			        	for(int i = 0 ; i < friend_list.size() ; i++){
//			        		if(friend_list.get(i).getFacebook_id().equals(userID)){
//			        			friend_list.get(i).setProfileImg(resultBitmap);
//									
//			        			File ReceiveDir = new File(DEST_DIR_PROFILE);
//			        			if(!ReceiveDir.exists()){
//			        				ReceiveDir.mkdir();
//			        			}
//				                	
//			        			String fileName = friend_list.get(i).getUniqueID()+".png";
//			        			File profile = new File(DEST_DIR_PROFILE + "/" + fileName);
//									
//			        			try {
//			        				profile.createNewFile();
//			        				FileOutputStream fo = new FileOutputStream(profile);
//			        				resultBitmap.compress(Bitmap.CompressFormat.PNG, 85, fo);
//			        				fo.flush();
//			        				fo.close();
//										
//			        			} catch (FileNotFoundException e) {
//			        				Log.e(TAG,e.getLocalizedMessage());
//			        				e.printStackTrace();
//			        			} catch (IOException e) {
//			        				Log.e(TAG,e.getLocalizedMessage());
//			        				e.printStackTrace();
//			        			}
//			        		}
//			        	}
//			        }
//				return 0L;
//			}
//			
//			@Override
//			protected void onPostExecute(Long result) {
//				
//				super.onPostExecute(result);
//			}
//		}.execute(userID);
//    }
//    
//    private byte[] bitmapToByteArray(Bitmap bitmap) {
//    	 ByteArrayOutputStream stream = new ByteArrayOutputStream();
//    	 bitmap.compress(CompressFormat.PNG, 100, stream);
//    	 byte[] byteArray = stream.toByteArray();
//    	 return byteArray;
//    	}
//    	
    private void getHashKey()
    {
            PackageInfo info;
            try {
            info = MainActivity.getInstasnce().getPackageManager().getPackageInfo("com.example.facebooklogintest", PackageManager.GET_SIGNATURES);
            for (Signature signature : info.signatures) {MessageDigest md;
            md = MessageDigest.getInstance("SHA");
            md.update(signature.toByteArray());
                       //String something = new String(Base64.encode(md.digest(), 0));
                         String something = new String(Base64.encode(md.digest(),0));
                       Log.e("** Hash Key", something);
            }
            }
            catch (NameNotFoundException e1) {
            Log.e("name not found", e1.toString());
            }

            catch (NoSuchAlgorithmException e) {
            Log.e("no such an algorithm", e.toString());
            }
            catch (Exception e){
            Log.e("exception", e.toString());
            }

    }

	public Session.StatusCallback getStatusCallback() {
		return statusCallback;
	}

}
