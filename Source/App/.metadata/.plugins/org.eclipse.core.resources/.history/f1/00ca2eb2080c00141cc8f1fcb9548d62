package com.ssm.cyclists.controller.manager;

import java.sql.SQLException;
import java.util.ArrayList;

import com.jjoe64.graphview.GraphView.GraphViewData;
import com.ssm.cyclists.controller.activity.MainActivity;
import com.ssm.cyclists.model.CycleData;
import com.ssm.cyclists.model.UserData;

import twitter4j.GeoLocation;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.location.Location;
import android.util.Log;

public class DataBaseManager extends SQLiteOpenHelper {

	static String TAG = DataBaseManager.class.getSimpleName();
	final int NUM 		= 0;
	final int LATITUDE 	= 1;
	final int LONGITUDE = 2;

	final int COLOR 	= 1;
	final int FACEBOOK_LOGIN_STATE = 2;
	final int TWITTER_LOGIN_STATE = 3;
	final int INSTAGRAM_LOGIN_STATE = 4;
	
	
	final int DATE 		= 1;
	final int VELOCITY 	= 2;
	final int ALTITUDE 	= 3;
	final int DISTANCE 	= 4;
	final int CALORY	= 5;
	final int LATITUDE_CRUISEDATA = 6;
	final int LONGITUDE_CRUISEDATA = 7;
	final int TIME_STAMP = 8;
	
	static DataBaseManager manager;
	SQLiteDatabase db;
	Context context;

	private DataBaseManager(Context context, String name, CursorFactory factory,
			int version) {
		super(context, name, factory, version);
		this.manager = this;
		this.context = context;
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		String sql = "CREATE TABLE last_location("+
				"num INTEGER PRIMARY KEY AUTOINCREMENT,"+
				"latitude TEXT,"+
				"longitude TEXT);";
		db.execSQL(sql);
		
		String sql2 = "CREATE TABLE settings("+
				"num INTEGER PRIMARY KEY AUTOINCREMENT,"+
				"color TEXT," +
				"facebook_login TEXT," +
				"twitter_login TEXT," +
				"instagram_login TEXT);";
		db.execSQL(sql2);
		
		String sql3 = "CREATE TABLE cruise_data("+
				"num INTEGER PRIMARY KEY AUTOINCREMENT,"+
				"startTime TEXT," +
				"velocity TEXT," +
				"altitude TEXT," +
				"distance TEXT," +
				"calory TEXT," +
				"lattitude TEXT," +
				"longitude TEXT," +
				"timestamp TEXT);";
		db.execSQL(sql3);
		
		String sql4 = "CREATE TABLE friend("+
				"uniqueNumber TEXT PRIMARY KEY,"+
				"name TEXT);";
		db.execSQL(sql4);
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int arg1, int arg2) {
		db.execSQL("DROP TABLE IF EXSITS last_location");
		db.execSQL("DROP TABLE IF EXSITS settings");
		db.execSQL("DROP TABLE IF EXSITS cruise_data");
		db.execSQL("DROP TABLE IF EXSITS friend");
		onCreate(db);
	}
	
	public void insertFriend(String uniqueNumber,String name){
		ContentValues row = new ContentValues();
		row.put("uniqueNumber",uniqueNumber);
		row.put("name",name);
		
		db = manager.getWritableDatabase();
		db.insert("friend",null,row);
	}
	
	public void updateFriend(String uniqueNumber, String name){
		ContentValues values = new ContentValues();
		db = manager.getWritableDatabase();
		db.rawQuery("update friendlist set name = \""+name+"\" where uniqueNumber=\""+uniqueNumber+"\";", null);
	}
	public void deleteAllFriend(){
		db = manager.getWritableDatabase();
		db.rawQuery("delete from friend;", null);
		
		Cursor c = db.rawQuery("select * from friend",null);
		
		int a = c.getCount();
		
		
		
	}
	
	public ArrayList<UserData> selectFriend(){
		ArrayList<UserData> arr = new ArrayList<UserData>();
		db = manager.getReadableDatabase();
		
		Cursor c = db.rawQuery("select * from friend order by name;", null);
		
		int count = c.getCount();
		c.moveToNext();
		for(int i = 0 ; i < count ; i++){
			UserData data = new UserData();
			data.setUniqueID(c.getString(0));
			data.setUserName(c.getString(1));
			arr.add(data);
		}
		
		return arr;
	}
	
	public void updateLastLocation(Location loc){

		ContentValues row = new ContentValues();
		row.put("latitude",String.valueOf(loc.getLatitude()));
		row.put("longitude",String.valueOf(loc.getLongitude()));
		
		db = manager.getWritableDatabase();
		
		Cursor c = db.query("last_location", null,null,null,null,null,null);
		
		int count = c.getCount();
		c.moveToNext();
		if(c.getCount()==0){
			db.insert("last_location",null,row);
		}
		else{
			db.update("last_location",row,"num="+c.getInt(NUM),null);
		}
	}
	
	public GeoLocation selectLastLocation(){
		
		db = manager.getReadableDatabase();
		
		Cursor c = db.query("last_location", null,null,null,null,null,null);

		c.moveToNext();
		if(c.getCount()==0) return null;
		GeoLocation loc = new GeoLocation(Double.valueOf(c.getString(LATITUDE)),Double.valueOf(c.getString(LONGITUDE)));
		
		return loc;
	}
	
	public void updateSettingInfo(){

		ContentValues row = new ContentValues();
		row.put("color",SettingsDataManager.getInstance().getThemeColor());
		row.put("facebook_login",SettingsDataManager.getInstance().isFacebookConnectd());
		row.put("twitter_login",SettingsDataManager.getInstance().isTwitterConnectd());
		row.put("instagram_login",SettingsDataManager.getInstance().isInstagramConnectd());
		
		db = manager.getWritableDatabase();
		
		Cursor c = db.query("settings", null,null,null,null,null,null);
		
		int count = c.getCount();
		c.moveToNext();
		if(c.getCount()==0){
			db.insert("settings",null,row);
		}
		else{
			int ret = db.update("settings",row,"num="+c.getInt(NUM),null);
			Log.d(TAG, "Database affected row : "+String.valueOf(ret));
		}
	}
	
	public void selectSettingInfo(){
		
		db = manager.getReadableDatabase();
		
		Cursor c = db.query("settings", null,null,null,null,null,null);

		c.moveToNext();
		if(c.getCount()==0) return;
		
		if(c.getString(FACEBOOK_LOGIN_STATE).equals("T"))	SettingsDataManager.getInstance().setFacebookConnectd(true);
		else SettingsDataManager.getInstance().setFacebookConnectd(false);
		
		if(c.getString(TWITTER_LOGIN_STATE).equals("T"))	SettingsDataManager.getInstance().setTwitterConnectd(true);
		else SettingsDataManager.getInstance().setTwitterConnectd(false);
		
		if(c.getString(INSTAGRAM_LOGIN_STATE).equals("T"))	SettingsDataManager.getInstance().setInstagramConnectd(true);
		else SettingsDataManager.getInstance().setInstagramConnectd(false);
		
		SettingsDataManager.getInstance().setThemeColor(c.getString(COLOR));
	}
	
	public void insertCruiseData(String date,String velocity,String altitude,String distance,String calory,String latitude,String longitude,String timestamp){
		ContentValues row = new ContentValues();
		row.put("startTime",date);
		row.put("velocity",velocity);
		row.put("altitude",altitude);
		row.put("distance",distance);
		row.put("calory",calory);
		row.put("lattitude",latitude);
		row.put("longitude",longitude);
		row.put("timestamp", timestamp);
		
		
		db = manager.getWritableDatabase();
		db.insert("cruise_data",null,row);
		
	}
	public ArrayList<CycleData> selectCruiseData(){

		db = manager.getReadableDatabase();
		Cursor c = db.rawQuery("select * from cruise_data order by timestamp;",null);

		ArrayList<CycleData> cycleDataList = new ArrayList<CycleData>();
		
		String prevStartTime = "";
		
		ArrayList<String> velocity = null;
		ArrayList<String> altitude = null;
		ArrayList<Double> distance = null;
		ArrayList<String> calory = null;
		ArrayList<Location> location = null;
		ArrayList<String> timestamp = null;
		
		for(int i = 0 ; i < c.getCount() ; i++){
			c.moveToNext();
			
			if(!prevStartTime.equals(c.getString(DATE))){
				
				if(!prevStartTime.equals("")){
					prevStartTime = c.getString(DATE);
					CycleData data = new CycleData();
					data.setStartTime(prevStartTime);
					data.setSpeedList(velocity);
					data.setAltitudeList(altitude);
					data.setLocationList(location);
					data.setDistanceList(distance);
					data.setConsumeCalroriesList(calory);
					
					cycleDataList.add(data);	
				}
				
				velocity = new ArrayList<String>();
				altitude = new ArrayList<String>();
				distance = new ArrayList<Double>();
				calory = new ArrayList<String>();
				location = new ArrayList<Location>();
				timestamp = new ArrayList<String>();
			}
			prevStartTime = c.getString(DATE);
			velocity.add(c.getString(VELOCITY));
			altitude.add(c.getString(ALTITUDE));
			distance.add(Double.valueOf(c.getString(DISTANCE)));
			calory.add(c.getString(CALORY));

			Location loc = new Location("gps");
			loc.setLatitude(Double.valueOf(c.getString(LATITUDE_CRUISEDATA)));
			loc.setLongitude(Double.valueOf(c.getString(LONGITUDE_CRUISEDATA)));
			
			location.add(loc);
			
			timestamp.add(c.getString(TIME_STAMP));
			
			if(i+1 == c.getCount()){
				CycleData data = new CycleData();
				data.setStartTime(prevStartTime);
				data.setSpeedList(velocity);
				data.setAltitudeList(altitude);
				data.setLocationList(location);
				data.setDistanceList(distance);
				data.setConsumeCalroriesList(calory);
				
				cycleDataList.add(data);	
			}
				
			Log.d(TAG,"1 : " +c.getString(1));
			Log.d(TAG,"2 : " +c.getString(2));
			Log.d(TAG,"3 : " +c.getString(3));
			Log.d(TAG,"4 : " +c.getString(4));
			Log.d(TAG,"5 : " +c.getString(5));
			Log.d(TAG,"6 : " +c.getString(6));
			Log.d(TAG,"7 : " +c.getString(7));
			Log.d(TAG,"8 : " +c.getString(8));
		}
		
		
		return cycleDataList;		
	}
	
	public void close(){
		db.close();
	}
	
	static public DataBaseManager getInstance(){
		if(manager == null) manager = new DataBaseManager(MainActivity.getInstasnce(),"CyclistsDB.sqlite",null,1);
		return manager;
	}

}
