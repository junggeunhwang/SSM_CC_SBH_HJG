package com.ssm.cyclists.controller.communication.sapinterface;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.util.HashMap;

import javax.security.cert.X509Certificate;

import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Binder;
import android.os.IBinder;
import android.util.Log;
import android.widget.Toast;

import com.samsung.android.sdk.SsdkUnsupportedException;
import com.samsung.android.sdk.accessory.SA;
import com.samsung.android.sdk.accessory.SAAgent;
import com.samsung.android.sdk.accessory.SAAuthenticationToken;
import com.samsung.android.sdk.accessory.SAPeerAgent;
import com.samsung.android.sdk.accessory.SASocket;
import com.samsung.android.sdk.accessoryfiletransfer.SAFileTransfer;
import com.samsung.android.sdk.accessoryfiletransfer.SAft;
import com.samsung.android.sdk.accessoryfiletransfer.SAFileTransfer.EventListener;
import com.ssm.cyclists.controller.communication.sapinterface.SAPProviderService;



public class SAPProviderService extends SAAgent {

public static final String TAG = "SAPStringProviderService";

	// peerDevice 인증 관련
	public Boolean isAuthentication = false;

	// 어플리케이션 컨텍스트
	public Context mContext = null;
	
	private boolean isBind = false;

	// 서비스 외부로 알리기위한 문자열 전송 관련 인터페이스
	private StringAction stringAction;
	// 서비스 외부로 알리기위한 파일 전송 관련 인터페이스
	private FileAction fileAction;
	// 파일 전송
	private SAFileTransfer mSAPFileTransfer = null;
    private EventListener  mSAPFileCallback;
    private SAPeerAgent    mPeerAgent;
    
    // 문자열 전송
    private SAPStringProviderConnection mSAPSocket;

	public static final int SERVICE_CONNECTION_RESULT_OK = 0;

	public static final int SAPStringProvider_CHANNEL_ID = 104;

	HashMap<Integer, SAPStringProviderConnection> mConnectionsMap = null;

	private final IBinder mBinder = new LocalBinder();

	public class LocalBinder extends Binder 
	{
		public SAPProviderService getService() 
		{
			return SAPProviderService.this;
		}
	}
	// 기본 생성자
	public SAPProviderService() 
	{
		super(TAG, SAPStringProviderConnection.class);
	}

	// 실제 통신을 담당하는 객체
	public class SAPStringProviderConnection extends SASocket 
	{
		public SAPStringProviderConnection() 
		{
			super(SAPStringProviderConnection.class.getName());
		}
		@Override
		public void onError(int channelId, String errorString, int error) 
		{
			Log.e(TAG, "Connection is not alive ERROR: " + errorString + "  "
					+ error);

			stringAction.onError(channelId, errorString, error);
		}
		@Override
		public void onReceive(int channelId, byte[] data) 
		{
			Log.d(TAG, "onReceive");

			// 호출
			stringAction.onReceive(channelId, data);
		}
		@Override
		protected void onServiceConnectionLost(int errorCode) 
		{
			Log.e(TAG, "onServiceConectionLost  for peer error code = " + errorCode);
			mSAPSocket = null;
			mPeerAgent = null;
			stringAction.onServiceConnectionLost(errorCode);
		}
	}

    @Override
    public void onCreate() {
        super.onCreate();
        Log.i(TAG, "onCreate of SAP Provider Service");
        
        // init file callback methods
        mSAPFileCallback = new EventListener() {                
            @Override
            public void onProgressChanged(int transId, int progress) 
            {
                Log.d(TAG, "onTransferProgress : " + progress + " transId : " + transId);
            }
            @Override
            public void onTransferCompleted(int transId, String fileName, int errorCode) 
            {
                Log.d(TAG, "onTransferComplete,  tr id : " + transId +  " file name : " + fileName + " error code : " + errorCode);
                if (errorCode == 0)
                {
                    fileAction.onTransferComplete(fileName);
                }
                else
                {
                    fileAction.onError("Error", errorCode);
                }
            }                

            @Override
            public void onTransferRequested(int id, String fileName) {
                Log.d(TAG, "onTransferRequested,  tr id : " + id +  " file name : " + fileName);
                fileAction.onTransferRequested(id, fileName);
            }
        };
        
        // SA init
        SA mAccessory = new SA();
        try {
        	mAccessory.initialize(this);
        } catch (SsdkUnsupportedException e) 
        {
        	if (e.getType() == SsdkUnsupportedException.DEVICE_NOT_SUPPORTED) 
            {
                Toast.makeText(getBaseContext(), "Cannot initialize, DEVICE_NOT_SUPPORTED", Toast.LENGTH_SHORT).show();
            } else if (e.getType() == SsdkUnsupportedException.LIBRARY_NOT_INSTALLED) {
                Toast.makeText(getBaseContext(), "Cannot initialize, LIBRARY_NOT_INSTALLED.", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(getBaseContext(), "Cannot initialize, unknown.", Toast.LENGTH_SHORT).show();
            }
        } catch (Exception e1) {
            Log.e(TAG, "Cannot initialize Accessory package.");
            e1.printStackTrace();
			/*
			 * Your application can not use Accessory package of Samsung
			 * Mobile SDK. You application should work smoothly without using
			 * this SDK, or you may want to notify user and close your app
			 * gracefully (release resources, stop Service threads, close UI
			 * thread, etc.)
			 */
            stopSelf();
        }

        // SAfiletransfer init
        SAft SAftPkg = new SAft();
        try {
            SAftPkg.initialize(this);
        } catch (SsdkUnsupportedException e) 
        {
            if (e.getType() == SsdkUnsupportedException.DEVICE_NOT_SUPPORTED) 
            {
                Toast.makeText(getBaseContext(), "Cannot initialize, DEVICE_NOT_SUPPORTED", Toast.LENGTH_SHORT).show();
            } else if (e.getType() == SsdkUnsupportedException.LIBRARY_NOT_INSTALLED) {
                Toast.makeText(getBaseContext(), "Cannot initialize, LIBRARY_NOT_INSTALLED.", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(getBaseContext(), "Cannot initialize, unknown.", Toast.LENGTH_SHORT).show();
            }
            stopSelf();
            
        } catch (Exception e1) {
            Toast.makeText(getBaseContext(), "Cannot initialize, SAFileTransfer.", Toast.LENGTH_SHORT).show();
            e1.printStackTrace();
            stopSelf();
        }
        
        // instantiate file transfer object
        mSAPFileTransfer = new SAFileTransfer(SAPProviderService.this, mSAPFileCallback);
    }	    

    @Override 
    protected void onServiceConnectionRequested(SAPeerAgent peerAgent) 
    {        	
    	if(isBind && peerAgent.getAppName().equals("SAPInterface")) 
    	{
            // Toast.makeText(getBaseContext(), "", Toast.LENGTH_SHORT).show();
            Log.e(TAG, "acceptServiceConnectionRequest");
            acceptServiceConnectionRequest(peerAgent);
        }
    	else
    	{
    		Log.e(TAG,"rejectServiceConnectionRequest");
    		rejectServiceConnectionRequest(peerAgent);
    	}
    } 
    
    protected void onAuthenticationResponse(SAPeerAgent uPeerAgent,	SAAuthenticationToken authToken, int error) 
    {

		if (authToken.getAuthenticationType() == SAAuthenticationToken.AUTHENTICATION_TYPE_CERTIFICATE_X509) {
			mContext = getApplicationContext();
			byte[] myAppKey = getApplicationCertificate(mContext);

			if (authToken.getKey() != null)
			{
				boolean matched = true;
				if(authToken.getKey().length != myAppKey.length)
				{
					matched = false;
				}
				else
				{
					for(int i=0; i<authToken.getKey().length; i++)
					{
						if(authToken.getKey()[i]!=myAppKey[i])
						{
							matched = false;
						}
					}
				}				
				if (matched) 
				{
					acceptServiceConnectionRequest(uPeerAgent);
					Log.e(TAG, "Auth-certification matched");
				}
				else
				{
					Log.e(TAG, "Auth-certification not matched");
				}				
			}
		} else if (authToken.getAuthenticationType() == SAAuthenticationToken.AUTHENTICATION_TYPE_NONE) 
			Log.e(TAG, "onAuthenticationResponse : CERT_TYPE(NONE)");		
	}

	private static byte[] getApplicationCertificate(Context context) {
		if(context == null) {
			Log.e(TAG, "getApplicationCertificate ERROR, context input null");
			return null;
		}
		Signature[] sigs;
		byte[] certificat = null;
		String packageName = context.getPackageName();
		if (context != null) {
			try {
				PackageInfo pkgInfo = null;
				pkgInfo = context.getPackageManager().getPackageInfo(
						packageName, PackageManager.GET_SIGNATURES);
				if (pkgInfo == null) {
					Log.e(TAG, "PackageInfo was null!");
					return null;
				}
				sigs = pkgInfo.signatures;
				if (sigs == null) {
					Log.e(TAG, "Signature obtained was null!");
				} else {
					CertificateFactory cf = CertificateFactory
							.getInstance("X.509");
					ByteArrayInputStream stream = new ByteArrayInputStream(
							sigs[0].toByteArray());
					X509Certificate cert;
					cert = X509Certificate.getInstance(stream);
					certificat = cert.getPublicKey().getEncoded();
				}
			} catch (NameNotFoundException e) {
				Log.e(TAG,e.getLocalizedMessage());
				e.printStackTrace();
			} catch (CertificateException e) {
				Log.e(TAG,e.getLocalizedMessage());
				e.printStackTrace();
			} catch (javax.security.cert.CertificateException e) {
				Log.e(TAG,e.getLocalizedMessage());
				e.printStackTrace();
			}

		}
		return certificat;
	}
    
	@Override
	protected void onFindPeerAgentResponse(SAPeerAgent arg0, int arg1) {
		// TODO Auto-generated method stub
		Log.d(TAG, "onFindPeerAgentResponse  arg1 =" + arg1);
	}

	@Override
	protected void onServiceConnectionResponse(SASocket thisConnection,	int result) 
	{
		if (result == CONNECTION_SUCCESS)
		{

			if (thisConnection != null) {
				mSAPSocket = (SAPStringProviderConnection)thisConnection;
				mPeerAgent = thisConnection.getConnectedPeerAgent();

				Log.e(TAG, "Connection Success");
			} 
			else 
			{
				Log.e(TAG, "SASocket object is null");
			}
		} else if (result == CONNECTION_ALREADY_EXIST) 
		{
			Log.e(TAG, "onServiceConnectionResponse, CONNECTION_ALREADY_EXIST");
		} else {
			Log.e(TAG, "onServiceConnectionResponse result error =" + result);
		}
	}
	// outer methods
	public void registerStringAction(StringAction action){
        this.stringAction = action;
    }
	public void registerFileAction(FileAction action){
        this.fileAction = action;
    }

	public void SendByteData(byte[] data)
	{
		if(mSAPSocket == null)
		{
			Log.e(TAG, "mSAPSocket null");
			return;
		}
		try {
			mSAPSocket.send(SAPStringProvider_CHANNEL_ID, data);
		} catch (IOException e) 
		{
			Log.e(TAG,e.getLocalizedMessage());
			e.printStackTrace();
		}
	}
	// 파일 작업 관련
	public void cancelFileTransfer(int transId) {
        if (mSAPFileTransfer != null) { 
            mSAPFileTransfer.cancel(transId);
        }
    }

    public void receiveFile(int transId, String path, boolean bAccept) {
        Log.d(TAG, "receiving file : transId: " + transId + "bAccept : " + bAccept);
        if (mSAPFileTransfer != null) {
            if (bAccept) 
            {
                mSAPFileTransfer.receive(transId, path);
            } else {
                mSAPFileTransfer.reject(transId);
            }
        }
    }
    
    public int sendFile(String fullPath)
    {
    	if(mPeerAgent == null)
    	{
    		Log.e(TAG,"mPeerAgent is null");
    		return -1;
    	}
    	int transactionId = mSAPFileTransfer.send(mPeerAgent, fullPath);
    	
    	return transactionId;
    }
    
	@Override
	public IBinder onBind(Intent arg0) {
		return mBinder;
	}
}