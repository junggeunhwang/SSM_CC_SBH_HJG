package com.ssm.cyclists.model;

import java.io.IOException;
import java.util.List;
import java.util.Locale;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.ssm.cyclists.R;
import com.ssm.cyclists.controller.HomeFragment;
import com.ssm.cyclists.controller.MainActivity;
import com.ssm.cyclists.controller.MapViewFragment;

import android.app.Dialog;
import android.content.Context;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;

public class MapManager {
	static MapManager instance;
	static String LOCATION_CHANGED = "com.ssm.cyclists.model.MapManager";
	
	private Location current_loc;
	private LocationManager  sys_loc_manager;
	private Geocoder geoCoder;
	private double speed;
	
	private MapManager() {
		sys_loc_manager = (LocationManager) MainActivity.getInstasnce().getSystemService(Context.LOCATION_SERVICE);
		init_map_service();
		geoCoder = new Geocoder(MainActivity.getInstasnce(),Locale.KOREA);
	}
	
	private void init_map_service(){
		
		// Getting Google Play availability status
        int status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(MainActivity.getInstasnce());
 
        // Showing status
        if(status!=ConnectionResult.SUCCESS){ // Google Play Services are not available
 
            int requestCode = 10;
            Dialog dialog = GooglePlayServicesUtil.getErrorDialog(status, MainActivity.getInstasnce(), requestCode);
            dialog.show();
 
        }else { // Google Play Services are available
 
 
            // Getting LocationManager object from System Service LOCATION_SERVICE
 
            // Creating a criteria object to retrieve provider
            Criteria criteria = new Criteria();
 
            // Getting the name of the best provider
            String provider = sys_loc_manager.getBestProvider(criteria, true);
            
            // Getting Current Location
            current_loc = sys_loc_manager.getLastKnownLocation(provider);
            
            sys_loc_manager.requestLocationUpdates(provider, 5000, 0, buildLocationChangediListener());
            
        }
	}
	
	public static MapManager getInstance(){
		if(instance == null){
			instance = new MapManager(); 
		}
		return instance;
	}
	
	
	private LocationListener buildLocationChangediListener(){
		return new LocationListener() {
			
			@Override
			public void onStatusChanged(String provider, int status, Bundle extras) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void onProviderEnabled(String provider) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void onProviderDisabled(String provider) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void onLocationChanged(Location location) {
				
				current_loc = location;

				((MapViewFragment)MainActivity.getInstasnce().getLayout().getFragment(R.layout.fragment_map)).moveMapCamenra(location);
				((HomeFragment)MainActivity.getInstasnce().getLayout().getFragment(R.layout.fragment_map)).update_weather(location);;
				
				speed = (double)(current_loc.getSpeed() * 3.6);
			}
		};
	}
	
	public Location getCurrnetLocation(){

		return current_loc;
	}

	public String getAddress(){
		StringBuffer juso = new StringBuffer();
		
		List<Address> addresses;
		
		try {
			addresses = geoCoder.getFromLocation(current_loc.getLatitude(), current_loc.getLongitude(),1);
			for(Address addr: addresses){
				int index = addr.getMaxAddressLineIndex();
				for(int i = 0 ; i <= index ; i++){
					juso.append(addr.getAddressLine(i));
					juso.append(" ");
				}
					juso.append("\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return juso.toString();		
	}
}
