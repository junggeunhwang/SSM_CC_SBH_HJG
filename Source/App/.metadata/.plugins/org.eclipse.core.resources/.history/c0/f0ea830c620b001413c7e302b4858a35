package com.ssm.cyclists.controller.fragment;


import java.util.Timer;

import org.apache.http.util.Args;

import com.ssm.cyclists.R;
import com.ssm.cyclists.controller.activity.MainActivity;
import com.ssm.cyclists.controller.timertask.CruiseInfoTimerTask;

import android.app.Fragment;
import android.app.FragmentManager;
import android.content.Context;
import android.os.Bundle;
import android.support.v13.app.FragmentPagerAdapter;
import android.support.v13.app.FragmentStatePagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;


public class CruiseContainerFragment extends Fragment {

	static String TAG = CruiseContainerFragment.class.getSimpleName();
	
	private static HomeFragment	  mHomeFragment = new HomeFragment();
	private static CruiseFragment mCruiseFragment = new CruiseFragment();
	private static CycleRoomFragment mCycleRoomFragment = new CycleRoomFragment();
	private static MapViewFragment	mMapViewFragment = new MapViewFragment();

	
	private ViewPager mPager;
	private PageAdapter mAdapter;
	private boolean viewPagerEnable = false;
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		
		View root = inflater.inflate(R.layout.fragment_cruise_container, container, false);
		
		mHomeFragment.setContainerFragment(this);
		mCruiseFragment.setContainerFragment(this);
		mCycleRoomFragment.setContainerFragment(this);
		mMapViewFragment.setContainerFragment(this);
		
		mAdapter = new PageAdapter(getChildFragmentManager());
		
		mPager = (ViewPager)root.findViewById(R.id.container);
		mPager.setAdapter(mAdapter);
		mPager.setCurrentItem(0);
//		updateColor();
		if(viewPagerEnable == true){
			setViewPagerBounds(4);
		}else{
			setViewPagerBounds(1);	
		}
		return root;
	}
	
	public void setViewPagerBounds(int itmeCount){
		PageAdapter Adapter = new PageAdapter(getChildFragmentManager());;
		Adapter.setCount(itmeCount);
		mPager.setAdapter(Adapter);
		mPager.setCurrentItem(0);
//		onDestroyView();
	}

	public static final class PageAdapter extends FragmentPagerAdapter {

		int count = 4;
		
		public PageAdapter(FragmentManager fragmentManager) {
			super(fragmentManager);
		}

		@Override
		public Fragment getItem(int position) {
			Log.d(TAG,"getItem : "+String.valueOf(position));
			switch (position)
			{
			case 0:
				return mHomeFragment;
			case 1:
				return mCruiseFragment;
			case 2:
				return mMapViewFragment;
			case 3:
				return mCycleRoomFragment;
				
			}
			return null;
		}

		public void setCount(int num){
			this.count = num;
		}

		@Override
		public int getCount() {
			return count;
		}
	}
	
	public static final class CustomViewPager extends ViewPager{
		private boolean swipe = false;

		public CustomViewPager(Context context) {
			super(context);
			// TODO Auto-generated constructor stub
		}

	    public CustomViewPager(Context context, AttributeSet attrs) {
	        super(context, attrs);
	    }
	    

	    public boolean isSwipe() {
	        return swipe;
	    }

	    public void setSwipe(boolean swipe) {
	        this.swipe = swipe;
	    }



	    @Override
	    public boolean onInterceptTouchEvent(MotionEvent arg0) {

	        if (swipe) {
	            return super.onInterceptTouchEvent(arg0);
	        }

	        // Never allow swiping to switch between pages
	        return false;
	    }

		
	}
	
	public void updateColor(){
		int current_item = mPager.getCurrentItem();
		
		switch(current_item)
		{
		case 0:
			mHomeFragment.getLayout().updateColor();
			mCruiseFragment.getLayout().updateColor();
			break;
		case 1:
			mHomeFragment.getLayout().updateColor();
			mCruiseFragment.getLayout().updateColor();
			mCycleRoomFragment.getLayout().updateColor();
			break;
		case 2:
			mCruiseFragment.getLayout().updateColor();
			mCycleRoomFragment.getLayout().updateColor();
			mMapViewFragment.getLayout().updateColor();
			break;
		case 3:
			mCycleRoomFragment.getLayout().updateColor();
			mMapViewFragment.getLayout().updateColor();
			break;
			
		}
	}
	
	@Override
	public void onDestroy() {
		mPager.removeAllViewsInLayout();
		mPager.removeAllViews();
		super.onDestroy();
	}
	
	public static CruiseFragment getmCruiseFragment() {
		return mCruiseFragment;
	}

	public static CycleRoomFragment getmCruiseTwoFragment() {
		return mCycleRoomFragment;
	}

	public static HomeFragment getmHomeFragment() {
		return mHomeFragment;
	}

	public static MapViewFragment getmMapViewFragment() {
		return mMapViewFragment;
	}


	public PageAdapter getmAdapter() {
		return mAdapter;
	}

	public ViewPager getmPager() {
		return mPager;
	}

	public boolean isViewPagerEnable() {
		return viewPagerEnable;
	}

	public void setViewPagerEnable(boolean viewPagerEnable) {
		this.viewPagerEnable = viewPagerEnable;
		onDestroyView();
	}


}
