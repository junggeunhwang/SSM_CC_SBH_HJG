package com.ssm.cyclists.controller;


import java.io.IOException;
import java.util.List;
import java.util.Locale;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.model.LatLng;
import com.ssm.cyclists.R;
import com.ssm.cyclists.view.layout.MapViewLayout;

import android.app.Dialog;
import android.app.Fragment;
import android.content.Context;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;


public class MapViewFragment extends Fragment {

	private MapViewLayout layout;
	private Geocoder geoCoder;
	private Location current_location;
	private LocationManager locationManager;
	@Override
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		geoCoder = new Geocoder(getView().getContext(),Locale.KOREA);
		init_map_service();
		
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		
		layout = new MapViewLayout(this);
		layout.createView(inflater, container);
		layout.init();
		
		return layout.getView();
	}
	
	private void init_map_service(){
		
		// Getting Google Play availability status
        int status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getActivity().getBaseContext());
 
        // Showing status
        if(status!=ConnectionResult.SUCCESS){ // Google Play Services are not available
 
            int requestCode = 10;
            Dialog dialog = GooglePlayServicesUtil.getErrorDialog(status, getActivity(), requestCode);
            dialog.show();
 
        }else { // Google Play Services are available
 
 
            // Getting LocationManager object from System Service LOCATION_SERVICE
            locationManager = (LocationManager) getActivity().getSystemService(Context.LOCATION_SERVICE);
 
            // Creating a criteria object to retrieve provider
            Criteria criteria = new Criteria();
 
            // Getting the name of the best provider
            String provider = locationManager.getBestProvider(criteria, true);
 
            locationManager.requestLocationUpdates(provider, 0, 0, buildLocationChangediListener());
        }
	}
	
	public LocationListener buildLocationChangediListener(){
		return new LocationListener() {
			
			@Override
			public void onStatusChanged(String provider, int status, Bundle extras) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void onProviderEnabled(String provider) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void onProviderDisabled(String provider) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void onLocationChanged(Location location) {
				current_location = location; 
				moveMapCamenra(location);
				((HomeFragment)MainActivity.getInstasnce().getLayout().getFragment(R.layout.fragment_home)).update_weather(location);
			}
		};
	}
	public void moveMapCamenra(Location location){
		
		if(layout!=null)
			layout.moveMapCamenra(location);
	}

	public MapViewLayout getLayout() {
		return layout;
	}
	
	public String getAddress(Location loc){
		StringBuffer juso = new StringBuffer();
		
		List<Address> addresses;
		
		try {
			addresses = geoCoder.getFromLocation(loc.getLatitude(), loc.getLongitude(),1);
			for(Address addr: addresses){
				int index = addr.getMaxAddressLineIndex();
				for(int i = 0 ; i <= index ; i++){
					juso.append(addr.getAddressLine(i));
					juso.append(" ");
				}
					juso.append("\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return juso.toString();		
	}

}
